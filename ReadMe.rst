============
error_spike
============

An empty skeleton to show the template of a Land Registry Flask application.


Platform
========

Windows 7
---------

1. Install Mingw (Git Bash)

2. Install `Python 3.4 <https://www.python.org/ftp/python/3.4.0/python-3.4.0.amd64.msi>`_::

    $ export PATH=/c/Python34/:$PATH

3. Get Pip::

    $ curl -O https://bootstrap.pypa.io/get-pip.py
    $ export PATH=/c/Python34/Scripts/:$PATH

CentOS 7
--------

1. Install Python 3::

   $ sudo yum install python34

2. Install Pip::

   $ wget https://bootstrap.pypa.io/get-pip.py
   $ sudo python3.4 get-pip.py

4. Use a Virtualenv::

   $ pyvenv-3.4  venv
   $ . venv/bin/activate


Quickstart
==========

An example of how to use error_spike as a cookie cutter for your 
new Land Registry Flask application. 


1. Clone::

    $ git clone git@git.lr.net:casework/error_spike.git

2. Rename the directory::
  
    $ mv error_spike error_spike

3. Watermark::

    $ cd error_spike
    $ git rev-parse HEAD > error_spike_HEAD.txt

5. Remove old repo::

    $ rm -rf .git

6. Rename::

    $ find . -type f -print0 | xargs -0 sed -i 's/error_spike/error_spike/g'
    $ mv error_spike error_spike

7. Create new repo::

   $ git init

8. Install the prereqs::

    $ pip3 install -r requirements.txt

9. Run the unittests::

    $ python setup.py test

10. Build the docs::

    $ sphinx-apidoc -F -o docs error_spike
    $ python setup.py build_sphinx
    $ firefox build/sphinx/html/index.html 

11. Start Developer Mode::

    $ python setup.py develop --user
    $ cd ~
    $ python 

    >>> import error_spike
    >>> error_spike.__version__

    $ cd -

12. Check the application::

    $ ./run.sh &
    $ curl http://127.0.0.1:5000/
    $ curl http://127.0.0.1:5000/helloworld/
    $ fg


Installation
============

Installation via setup.py::

    $ python setup.py install

Or with `pip <https://pip.pypa.io/en/stable/reference/pip_install/>`_.


Running
=======

::

    $ error_spike --version
    error_spike 0.1.1

::

    $ error_spike --help
    Usage: error_spike [options]

    Options:
      --version             show program's version number and exit
      -h, --help            show this help message and exit
      -d, --debug           Run Flask in debug
      -p PORT, --port=PORT  Set the port
      --host=HOST           The host IP.


Gunicorn Integration
====================

Install as a package to the system::

    $ python setup.py sdist
    $ sudo pip3 install dist/error_spike-0.1.tar.gz
    $ python -c "import error_spike; print(error_spike.__file__)"
    /usr/local/lib/python3.4/dist-packages/error_spike/__init__.py
    $ gunicorn --bind 0.0.0.0:8000 error_spike:app
    [2016-01-21 12:02:48 +0000] [21948] [INFO] Starting gunicorn 19.4.5

Uninstall the system package::

    $ sudo pip3 uninstall error_spike
    Uninstalling boiler-plate:
    <snip>
    Successfully uninstalled boiler-plate
    $ python -c "import error_spike; print(error_spike.__file__)"
    Traceback (most recent call last):
    File "<string>", line 1, in <module>
    ImportError: No module named 'error_spike'

Install in Developer Mode::

    $ cd /home/tom/projects/error_spike/
    $ sudo pip3 install -e .
    $ python -c "import error_spike; print(error_spike.__file__)"
    /home/fred/projects/error_spike/error_spike/__init__.py
    $ gunicorn --bind 0.0.0.0:8000 error_spike:app
    [2016-01-21 12:05:02 +0000] [21997] [INFO] Starting gunicorn 19.4.5


Credits
=======

1. `dm-api-skeleton <https://github.com/LandRegistry/dm-api-skeleton>`_.

2. `digital ocean <https://www.digitalocean.com/community/tutorials/how-to-package-and-distribute-python-applications>`_.

3. `hitchhiker's guide <https://the-hitchhikers-guide-to-packaging.readthedocs.org/en/latest/>`_.


Pre-Reqs
========

* The setup.py takes the enhanced approach provided by `setuptools <https://pythonhosted.org/setuptools/setuptools.html>`_.

* Documentation is via `sphinx <http://www.sphinx-doc.org/en/stable/>`_.


Blueprints
==========

`helloworld` shows an example of a `Flask Blueprint <http://flask.pocoo.org/docs/0.10/blueprints/>`_.


Tests
=====

The skeleton has a harvester which creates a test suite that can 
be run from the setup script. 

::

    $ python setup.py test


Versioning
==========

Increment the  `__version__` variable in the project level __init__.py 


Documentation
=============

The API Docs are a modified from those auto-generated by apidoc.

Rerun this command to fill in the missing rst files.

::

    $ sphinx-apidoc -F -o docs error_spike

Build the html from the rst.

::
 
    $ python setup.py build_sphinx


Known Issues
============

* Test coverage in the pytest runner.
* Sphinx docs are klunky
* License 
* File Headers
